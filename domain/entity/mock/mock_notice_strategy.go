// Code generated by MockGen. DO NOT EDIT.
// Source: ./notice_strategy.go

// Package mock is a generated GoMock package.
package mock

import (
	vo "go_project/domain/vo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNoticeStrategyEntityInterface is a mock of NoticeStrategyEntityInterface interface.
type MockNoticeStrategyEntityInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNoticeStrategyEntityInterfaceMockRecorder
}

// MockNoticeStrategyEntityInterfaceMockRecorder is the mock recorder for MockNoticeStrategyEntityInterface.
type MockNoticeStrategyEntityInterfaceMockRecorder struct {
	mock *MockNoticeStrategyEntityInterface
}

// NewMockNoticeStrategyEntityInterface creates a new mock instance.
func NewMockNoticeStrategyEntityInterface(ctrl *gomock.Controller) *MockNoticeStrategyEntityInterface {
	mock := &MockNoticeStrategyEntityInterface{ctrl: ctrl}
	mock.recorder = &MockNoticeStrategyEntityInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoticeStrategyEntityInterface) EXPECT() *MockNoticeStrategyEntityInterfaceMockRecorder {
	return m.recorder
}

// AddNoticeStrategy mocks base method.
func (m *MockNoticeStrategyEntityInterface) AddNoticeStrategy(data *vo.NoticeStrategyCreateReq, createdBy string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNoticeStrategy", data, createdBy)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNoticeStrategy indicates an expected call of AddNoticeStrategy.
func (mr *MockNoticeStrategyEntityInterfaceMockRecorder) AddNoticeStrategy(data, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNoticeStrategy", reflect.TypeOf((*MockNoticeStrategyEntityInterface)(nil).AddNoticeStrategy), data, createdBy)
}

// DelNoticeStrategy mocks base method.
func (m *MockNoticeStrategyEntityInterface) DelNoticeStrategy(id int, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelNoticeStrategy", id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelNoticeStrategy indicates an expected call of DelNoticeStrategy.
func (mr *MockNoticeStrategyEntityInterfaceMockRecorder) DelNoticeStrategy(id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelNoticeStrategy", reflect.TypeOf((*MockNoticeStrategyEntityInterface)(nil).DelNoticeStrategy), id, deletedBy)
}

// GetNoticeStrategyInfo mocks base method.
func (m *MockNoticeStrategyEntityInterface) GetNoticeStrategyInfo(id int) (*vo.NoticeStrategyGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoticeStrategyInfo", id)
	ret0, _ := ret[0].(*vo.NoticeStrategyGetInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoticeStrategyInfo indicates an expected call of GetNoticeStrategyInfo.
func (mr *MockNoticeStrategyEntityInterfaceMockRecorder) GetNoticeStrategyInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoticeStrategyInfo", reflect.TypeOf((*MockNoticeStrategyEntityInterface)(nil).GetNoticeStrategyInfo), id)
}

// GetNoticeStrategyList mocks base method.
func (m *MockNoticeStrategyEntityInterface) GetNoticeStrategyList(filter map[string]interface{}) (int64, []*vo.NoticeStrategyGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoticeStrategyList", filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*vo.NoticeStrategyGetInfoRes)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNoticeStrategyList indicates an expected call of GetNoticeStrategyList.
func (mr *MockNoticeStrategyEntityInterfaceMockRecorder) GetNoticeStrategyList(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoticeStrategyList", reflect.TypeOf((*MockNoticeStrategyEntityInterface)(nil).GetNoticeStrategyList), filter)
}

// ModNoticeStrategy mocks base method.
func (m *MockNoticeStrategyEntityInterface) ModNoticeStrategy(id int, data map[string]interface{}, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModNoticeStrategy", id, data, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModNoticeStrategy indicates an expected call of ModNoticeStrategy.
func (mr *MockNoticeStrategyEntityInterfaceMockRecorder) ModNoticeStrategy(id, data, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModNoticeStrategy", reflect.TypeOf((*MockNoticeStrategyEntityInterface)(nil).ModNoticeStrategy), id, data, updatedBy)
}
