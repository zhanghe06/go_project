// Code generated by MockGen. DO NOT EDIT.
// Source: ./cert.go

// Package mock is a generated GoMock package.
package mock

import (
	vo "go_project/domain/vo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertEntityInterface is a mock of CertEntityInterface interface.
type MockCertEntityInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCertEntityInterfaceMockRecorder
}

// MockCertEntityInterfaceMockRecorder is the mock recorder for MockCertEntityInterface.
type MockCertEntityInterfaceMockRecorder struct {
	mock *MockCertEntityInterface
}

// NewMockCertEntityInterface creates a new mock instance.
func NewMockCertEntityInterface(ctrl *gomock.Controller) *MockCertEntityInterface {
	mock := &MockCertEntityInterface{ctrl: ctrl}
	mock.recorder = &MockCertEntityInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertEntityInterface) EXPECT() *MockCertEntityInterfaceMockRecorder {
	return m.recorder
}

// AddCert mocks base method.
func (m *MockCertEntityInterface) AddCert(data *vo.CertCreateReq, createdBy string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCert", data, createdBy)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCert indicates an expected call of AddCert.
func (mr *MockCertEntityInterfaceMockRecorder) AddCert(data, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCert", reflect.TypeOf((*MockCertEntityInterface)(nil).AddCert), data, createdBy)
}

// DelCert mocks base method.
func (m *MockCertEntityInterface) DelCert(id int, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelCert", id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelCert indicates an expected call of DelCert.
func (mr *MockCertEntityInterfaceMockRecorder) DelCert(id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCert", reflect.TypeOf((*MockCertEntityInterface)(nil).DelCert), id, deletedBy)
}

// GetCertInfo mocks base method.
func (m *MockCertEntityInterface) GetCertInfo(id int) (*vo.CertGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertInfo", id)
	ret0, _ := ret[0].(*vo.CertGetInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertInfo indicates an expected call of GetCertInfo.
func (mr *MockCertEntityInterfaceMockRecorder) GetCertInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertInfo", reflect.TypeOf((*MockCertEntityInterface)(nil).GetCertInfo), id)
}

// GetCertList mocks base method.
func (m *MockCertEntityInterface) GetCertList(filter map[string]interface{}) (int64, []*vo.CertGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertList", filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*vo.CertGetInfoRes)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertList indicates an expected call of GetCertList.
func (mr *MockCertEntityInterfaceMockRecorder) GetCertList(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertList", reflect.TypeOf((*MockCertEntityInterface)(nil).GetCertList), filter)
}

// ModCert mocks base method.
func (m *MockCertEntityInterface) ModCert(id int, data map[string]interface{}, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModCert", id, data, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModCert indicates an expected call of ModCert.
func (mr *MockCertEntityInterfaceMockRecorder) ModCert(id, data, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModCert", reflect.TypeOf((*MockCertEntityInterface)(nil).ModCert), id, data, updatedBy)
}
