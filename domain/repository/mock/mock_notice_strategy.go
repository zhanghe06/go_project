// Code generated by MockGen. DO NOT EDIT.
// Source: ./notice_strategy.go

// Package mock is a generated GoMock package.
package mock

import (
	model "go_project/infra/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNoticeStrategyRepoInterface is a mock of NoticeStrategyRepoInterface interface.
type MockNoticeStrategyRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNoticeStrategyRepoInterfaceMockRecorder
}

// MockNoticeStrategyRepoInterfaceMockRecorder is the mock recorder for MockNoticeStrategyRepoInterface.
type MockNoticeStrategyRepoInterfaceMockRecorder struct {
	mock *MockNoticeStrategyRepoInterface
}

// NewMockNoticeStrategyRepoInterface creates a new mock instance.
func NewMockNoticeStrategyRepoInterface(ctrl *gomock.Controller) *MockNoticeStrategyRepoInterface {
	mock := &MockNoticeStrategyRepoInterface{ctrl: ctrl}
	mock.recorder = &MockNoticeStrategyRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoticeStrategyRepoInterface) EXPECT() *MockNoticeStrategyRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNoticeStrategyRepoInterface) Create(data *model.NoticeStrategy, createdBy string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data, createdBy)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNoticeStrategyRepoInterfaceMockRecorder) Create(data, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoticeStrategyRepoInterface)(nil).Create), data, createdBy)
}

// Delete mocks base method.
func (m *MockNoticeStrategyRepoInterface) Delete(id int, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNoticeStrategyRepoInterfaceMockRecorder) Delete(id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoticeStrategyRepoInterface)(nil).Delete), id, deletedBy)
}

// GetInfo mocks base method.
func (m *MockNoticeStrategyRepoInterface) GetInfo(id int) (*model.NoticeStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", id)
	ret0, _ := ret[0].(*model.NoticeStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockNoticeStrategyRepoInterfaceMockRecorder) GetInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockNoticeStrategyRepoInterface)(nil).GetInfo), id)
}

// GetList mocks base method.
func (m *MockNoticeStrategyRepoInterface) GetList(filter map[string]interface{}) (int64, []*model.NoticeStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.NoticeStrategy)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockNoticeStrategyRepoInterfaceMockRecorder) GetList(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockNoticeStrategyRepoInterface)(nil).GetList), filter)
}

// Update mocks base method.
func (m *MockNoticeStrategyRepoInterface) Update(id int, data map[string]interface{}, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoticeStrategyRepoInterfaceMockRecorder) Update(id, data, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoticeStrategyRepoInterface)(nil).Update), id, data, updatedBy)
}
