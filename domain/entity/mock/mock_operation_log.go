// Code generated by MockGen. DO NOT EDIT.
// Source: ./operation_log.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	vo "sap_cert_mgt/domain/vo"

	gomock "github.com/golang/mock/gomock"
)

// MockOperationLogEntityInterface is a mock of OperationLogEntityInterface interface.
type MockOperationLogEntityInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOperationLogEntityInterfaceMockRecorder
}

// MockOperationLogEntityInterfaceMockRecorder is the mock recorder for MockOperationLogEntityInterface.
type MockOperationLogEntityInterfaceMockRecorder struct {
	mock *MockOperationLogEntityInterface
}

// NewMockOperationLogEntityInterface creates a new mock instance.
func NewMockOperationLogEntityInterface(ctrl *gomock.Controller) *MockOperationLogEntityInterface {
	mock := &MockOperationLogEntityInterface{ctrl: ctrl}
	mock.recorder = &MockOperationLogEntityInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationLogEntityInterface) EXPECT() *MockOperationLogEntityInterfaceMockRecorder {
	return m.recorder
}

// AddOperationLog mocks base method.
func (m *MockOperationLogEntityInterface) AddOperationLog(data *vo.OperationLogCreateReq, createdBy string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOperationLog", data, createdBy)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOperationLog indicates an expected call of AddOperationLog.
func (mr *MockOperationLogEntityInterfaceMockRecorder) AddOperationLog(data, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationLog", reflect.TypeOf((*MockOperationLogEntityInterface)(nil).AddOperationLog), data, createdBy)
}

// DelOperationLog mocks base method.
func (m *MockOperationLogEntityInterface) DelOperationLog(id int, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelOperationLog", id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelOperationLog indicates an expected call of DelOperationLog.
func (mr *MockOperationLogEntityInterfaceMockRecorder) DelOperationLog(id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelOperationLog", reflect.TypeOf((*MockOperationLogEntityInterface)(nil).DelOperationLog), id, deletedBy)
}

// GetOperationLogInfo mocks base method.
func (m *MockOperationLogEntityInterface) GetOperationLogInfo(id int) (*vo.OperationLogGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationLogInfo", id)
	ret0, _ := ret[0].(*vo.OperationLogGetInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationLogInfo indicates an expected call of GetOperationLogInfo.
func (mr *MockOperationLogEntityInterfaceMockRecorder) GetOperationLogInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationLogInfo", reflect.TypeOf((*MockOperationLogEntityInterface)(nil).GetOperationLogInfo), id)
}

// GetOperationLogList mocks base method.
func (m *MockOperationLogEntityInterface) GetOperationLogList(filter map[string]interface{}, args ...interface{}) (int64, []*vo.OperationLogGetInfoRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{filter}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationLogList", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*vo.OperationLogGetInfoRes)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationLogList indicates an expected call of GetOperationLogList.
func (mr *MockOperationLogEntityInterfaceMockRecorder) GetOperationLogList(filter interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{filter}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationLogList", reflect.TypeOf((*MockOperationLogEntityInterface)(nil).GetOperationLogList), varargs...)
}
