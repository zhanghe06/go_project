// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mock is a generated GoMock package.
package mock

import (
	vo "go_project/domain/vo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserEntityInterface is a mock of UserEntityInterface interface.
type MockUserEntityInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserEntityInterfaceMockRecorder
}

// MockUserEntityInterfaceMockRecorder is the mock recorder for MockUserEntityInterface.
type MockUserEntityInterfaceMockRecorder struct {
	mock *MockUserEntityInterface
}

// NewMockUserEntityInterface creates a new mock instance.
func NewMockUserEntityInterface(ctrl *gomock.Controller) *MockUserEntityInterface {
	mock := &MockUserEntityInterface{ctrl: ctrl}
	mock.recorder = &MockUserEntityInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEntityInterface) EXPECT() *MockUserEntityInterfaceMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserEntityInterface) AddUser(data *vo.UserCreateReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserEntityInterfaceMockRecorder) AddUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserEntityInterface)(nil).AddUser), data)
}

// DelUser mocks base method.
func (m *MockUserEntityInterface) DelUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUser indicates an expected call of DelUser.
func (mr *MockUserEntityInterfaceMockRecorder) DelUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUser", reflect.TypeOf((*MockUserEntityInterface)(nil).DelUser), id)
}

// GetUserInfo mocks base method.
func (m *MockUserEntityInterface) GetUserInfo(id int) (*vo.UserGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", id)
	ret0, _ := ret[0].(*vo.UserGetInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserEntityInterfaceMockRecorder) GetUserInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserEntityInterface)(nil).GetUserInfo), id)
}

// GetUserList mocks base method.
func (m *MockUserEntityInterface) GetUserList(filter map[string]interface{}) (int64, []*vo.UserGetInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*vo.UserGetInfoRes)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockUserEntityInterfaceMockRecorder) GetUserList(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockUserEntityInterface)(nil).GetUserList), filter)
}

// ModUser mocks base method.
func (m *MockUserEntityInterface) ModUser(id int, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModUser", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModUser indicates an expected call of ModUser.
func (mr *MockUserEntityInterfaceMockRecorder) ModUser(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModUser", reflect.TypeOf((*MockUserEntityInterface)(nil).ModUser), id, data)
}
