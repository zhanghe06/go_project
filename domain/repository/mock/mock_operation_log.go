// Code generated by MockGen. DO NOT EDIT.
// Source: ./operation_log.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "sap_cert_mgt/infra/model"

	gomock "github.com/golang/mock/gomock"
)

// MockOperationLogRepoInterface is a mock of OperationLogRepoInterface interface.
type MockOperationLogRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOperationLogRepoInterfaceMockRecorder
}

// MockOperationLogRepoInterfaceMockRecorder is the mock recorder for MockOperationLogRepoInterface.
type MockOperationLogRepoInterfaceMockRecorder struct {
	mock *MockOperationLogRepoInterface
}

// NewMockOperationLogRepoInterface creates a new mock instance.
func NewMockOperationLogRepoInterface(ctrl *gomock.Controller) *MockOperationLogRepoInterface {
	mock := &MockOperationLogRepoInterface{ctrl: ctrl}
	mock.recorder = &MockOperationLogRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationLogRepoInterface) EXPECT() *MockOperationLogRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOperationLogRepoInterface) Create(data *model.OperationLog, createdBy string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data, createdBy)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOperationLogRepoInterfaceMockRecorder) Create(data, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperationLogRepoInterface)(nil).Create), data, createdBy)
}

// Delete mocks base method.
func (m *MockOperationLogRepoInterface) Delete(id int, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOperationLogRepoInterfaceMockRecorder) Delete(id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOperationLogRepoInterface)(nil).Delete), id, deletedBy)
}

// GetInfo mocks base method.
func (m *MockOperationLogRepoInterface) GetInfo(id int) (*model.OperationLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", id)
	ret0, _ := ret[0].(*model.OperationLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockOperationLogRepoInterfaceMockRecorder) GetInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockOperationLogRepoInterface)(nil).GetInfo), id)
}

// GetList mocks base method.
func (m *MockOperationLogRepoInterface) GetList(filter map[string]interface{}, args ...interface{}) (int64, []*model.OperationLog, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{filter}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetList", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.OperationLog)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockOperationLogRepoInterfaceMockRecorder) GetList(filter interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{filter}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockOperationLogRepoInterface)(nil).GetList), varargs...)
}

// Update mocks base method.
func (m *MockOperationLogRepoInterface) Update(id int, data map[string]interface{}, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOperationLogRepoInterfaceMockRecorder) Update(id, data, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOperationLogRepoInterface)(nil).Update), id, data, updatedBy)
}
