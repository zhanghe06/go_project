// Code generated by MockGen. DO NOT EDIT.
// Source: ./email_notice.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailNoticeEntityInterface is a mock of EmailNoticeEntityInterface interface.
type MockEmailNoticeEntityInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailNoticeEntityInterfaceMockRecorder
}

// MockEmailNoticeEntityInterfaceMockRecorder is the mock recorder for MockEmailNoticeEntityInterface.
type MockEmailNoticeEntityInterfaceMockRecorder struct {
	mock *MockEmailNoticeEntityInterface
}

// NewMockEmailNoticeEntityInterface creates a new mock instance.
func NewMockEmailNoticeEntityInterface(ctrl *gomock.Controller) *MockEmailNoticeEntityInterface {
	mock := &MockEmailNoticeEntityInterface{ctrl: ctrl}
	mock.recorder = &MockEmailNoticeEntityInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailNoticeEntityInterface) EXPECT() *MockEmailNoticeEntityInterfaceMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockEmailNoticeEntityInterface) Scan() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockEmailNoticeEntityInterfaceMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockEmailNoticeEntityInterface)(nil).Scan))
}

// Send mocks base method.
func (m *MockEmailNoticeEntityInterface) Send() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailNoticeEntityInterfaceMockRecorder) Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailNoticeEntityInterface)(nil).Send))
}
